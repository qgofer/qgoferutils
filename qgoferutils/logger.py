# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_logger.ipynb.

# %% auto 0
__all__ = ['get_log_path', 'get_logger']

# %% ../nbs/02_logger.ipynb 4
import logging
import sys
from pathlib import Path
from typing import Optional
from datetime import datetime

try:
    from .core import init_path
    from .core import generate_uuid
except:
    pass

# %% ../nbs/02_logger.ipynb 5
def get_log_path(path: Optional[Path] = None) -> Path:
    """Returns the log path."""
    if path is None:
        path = init_path(path) / ".qgofer" / "logs"
        path.mkdir(parents=True, exist_ok=True)
    return Path(path).expanduser().resolve()

# %% ../nbs/02_logger.ipynb 6
def get_logger(log_path=None, run_id=None) -> logging.Logger:
    """Returns a generic logger for logging relevant information pertaining to run of qgofer.

    Returns:
        Python logger object
    """
    log_path = get_log_path(log_path)
    logger = logging.getLogger("qgofer")
    logger.setLevel(logging.DEBUG)

    if not run_id:
        run_id = generate_uuid()

    file_path = (
        f"{log_path}/{run_id}_log_{datetime.now().strftime('%y_%m_%d_%H_%M_%S')}.log"
    )
    if not logger.handlers:
        # create file handler which logs even debug messages
        fh = logging.FileHandler(file_path)
        fh.setLevel(logging.DEBUG)
        # create console handler with a higher log level
        ch = logging.StreamHandler(stream=sys.stdout)
        ch.setLevel(logging.DEBUG)

        # create formatter and add it to the handlers
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        fh.setFormatter(formatter)
        ch.setFormatter(formatter)

        # add the handlers to the logger
        logger.addHandler(fh)
        logger.addHandler(ch)
        logger.info(f"Logging to {file_path}")

    return logger
